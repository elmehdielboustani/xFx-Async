/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient.js";
import * as fs from 'fs';


/**
* Xfx service.
* @module api/XfxApi
* @version 1.0.0
*/
export class XfxApi {

  /**
  * Constructs a new XfxApi. 
  * @alias module:api/XfxApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }



  /**
   * @param {String} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */
  browseFilesWithHttpInfo(path) {

    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error("Missing the required parameter 'path' when calling browseFiles");
    }

    let pathParams = {

    };
    let queryParams = {
      'path': path
    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = 'String';

    return this.apiClient.callApi(
      '/xfx/getfiles', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * @param {<&vendorExtensions.x-jsdoc-type>} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
   */
  browseFiles(path) {
    return this.browseFilesWithHttpInfo(path)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * @param {String} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */
  deleteFileWithHttpInfo(path) {

    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error("Missing the required parameter 'path' when calling deleteFile");
    }

    let pathParams = {

    };
    let queryParams = {
      'path': path
    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = [];
    let contentTypes = [];
    let accepts = ['*/*'];
    let returnType = 'String';

    return this.apiClient.callApi(
      '/xfx/delete', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * @param {<&vendorExtensions.x-jsdoc-type>} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
   */
  deleteFile(path) {
    return this.deleteFileWithHttpInfo(path)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * @param {String} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
   */
  downloadFileWithHttpInfo(path) {

    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error("Missing the required parameter 'path' when calling downloadFile");
    }

    let pathParams = {

    };
    let queryParams = {
      'path': path
    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = [];
    let contentTypes = [];
    let accepts = ['*/*'];
    let returnType = 'Blob';

    return this.apiClient.callApi(
      '/xfx/download', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * @param {<&vendorExtensions.x-jsdoc-type>} path 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
   */
  downloadFile(path) {
    return this.downloadFileWithHttpInfo(path)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * @param {String} path 
   * @param {String} name 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */
  renameFileWithHttpInfo(path, name) {

    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error("Missing the required parameter 'path' when calling renameFile");
    }
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling renameFile");
    }

    let pathParams = {

    };
    let queryParams = {
      'path': path, 'name': name
    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = [];
    let contentTypes = [];
    let accepts = ['*/*'];
    let returnType = 'String';

    return this.apiClient.callApi(
      '/xfx/rename', 'PATCH',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * @param {<&vendorExtensions.x-jsdoc-type>} path 
   * @param {<&vendorExtensions.x-jsdoc-type>} name 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
   */
  renameFile(path, name) {
    return this.renameFileWithHttpInfo(path, name)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * @param {String} path 
   * @param {Object} opts Optional parameters
   * @param {Blob} opts.file 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */
  uploadFileWithHttpInfo(path, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error("Missing the required parameter 'path' when calling uploadFile");
    }

    let pathParams = {

    };
    let queryParams = {
      'path': path
    };
    let headerParams = {

    };
    let formParams = {
      'file': opts['file']
    };

    let authNames = [];
    let contentTypes = ['multipart/form-data'];
    let accepts = ['*/*'];
    let returnType = 'String';

    return this.apiClient.callApi(
      '/xfx/upload', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * @param {<&vendorExtensions.x-jsdoc-type>} path 
   * @param {Object} opts Optional parameters
   * @param {Blob} opts.file 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
   */
  uploadFile(path, opts) {
    return this.uploadFileWithHttpInfo(path, opts)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }

}